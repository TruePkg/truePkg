'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _values = require('graphql/execution/values');

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _graphql = require('graphql');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function queryComplexityMessage(max, actual) {
  return 'The query exceeds the maximum complexity of ' + max + '. ' + ('Actual complexity is ' + actual);
} /**
   * Created by Ivo MeiÃŸner on 28.07.17.
   *
   * 
   */

var QueryComplexity = function () {
  function QueryComplexity(context, options) {
    (0, _classCallCheck3.default)(this, QueryComplexity);

    (0, _assert2.default)(typeof options.maximumComplexity === 'number' && options.maximumComplexity > 0, 'Maximum query complexity must be a positive number');

    this.context = context;
    this.complexity = 0;
    this.options = options;

    this.OperationDefinition = {
      enter: this.onOperationDefinitionEnter,
      leave: this.onOperationDefinitionLeave
    };
  }

  (0, _createClass3.default)(QueryComplexity, [{
    key: 'onOperationDefinitionEnter',
    value: function onOperationDefinitionEnter(operation) {
      switch (operation.operation) {
        case 'query':
          this.complexity += this.nodeComplexity(operation, this.context.getSchema().getQueryType());
          break;
        case 'mutation':
          this.complexity += this.nodeComplexity(operation, this.context.getSchema().getMutationType());
          break;
        case 'subscription':
          this.complexity += this.nodeComplexity(operation, this.context.getSchema().getSubscriptionType());
          break;
        default:
          throw new Error('Query complexity could not be calculated for operation of type ' + operation.operation);
      }
    }
  }, {
    key: 'onOperationDefinitionLeave',
    value: function onOperationDefinitionLeave() {
      if (this.options.onComplete) {
        this.options.onComplete(this.complexity);
      }

      if (this.complexity > this.options.maximumComplexity) {
        return this.context.reportError(this.createError());
      }
    }
  }, {
    key: 'nodeComplexity',
    value: function nodeComplexity(node, typeDef) {
      var _this = this;

      var complexity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

      if (node.selectionSet) {
        var fields = {};
        if (typeDef instanceof _graphql.GraphQLObjectType || typeDef instanceof _graphql.GraphQLInterfaceType) {
          fields = typeDef.getFields();
        }
        return complexity + node.selectionSet.selections.reduce(function (total, childNode) {
          var nodeComplexity = 0;

          switch (childNode.kind) {
            case _graphql.Kind.FIELD:
              {
                var field = fields[childNode.name.value];
                // Invalid field, should be caught by other validation rules
                if (!field) {
                  break;
                }
                var fieldType = (0, _graphql.getNamedType)(field.type);

                // Get arguments
                var args = void 0;
                try {
                  args = (0, _values.getArgumentValues)(field, childNode, _this.options.variables || {});
                } catch (e) {
                  return _this.context.reportError(e);
                }

                // Check if we have child complexity
                var childComplexity = 0;
                if (fieldType instanceof _graphql.GraphQLObjectType || fieldType instanceof _graphql.GraphQLInterfaceType || fieldType instanceof _graphql.GraphQLUnionType) {
                  childComplexity = _this.nodeComplexity(childNode, fieldType);
                }

                // Calculate complexity score
                // $FlowFixMe: Complexity not defined in field config of graphql library
                switch ((0, _typeof3.default)(field.complexity)) {
                  case 'function':
                    nodeComplexity = field.complexity(args, childComplexity);
                    break;
                  case 'number':
                    nodeComplexity = childComplexity + field.complexity;
                    break;
                  default:
                    nodeComplexity = _this.getDefaultComplexity(args, childComplexity);
                    break;
                }
                break;
              }
            case _graphql.Kind.FRAGMENT_SPREAD:
              {
                var fragment = _this.context.getFragment(childNode.name.value);
                var fragmentType = _this.context.getSchema().getType(fragment.typeCondition.name.value);
                nodeComplexity = _this.nodeComplexity(fragment, fragmentType);
                break;
              }
            case _graphql.Kind.INLINE_FRAGMENT:
              {
                var inlineFragmentType = typeDef;
                if (childNode.typeCondition && childNode.typeCondition.name) {
                  // $FlowFixMe: Not sure why flow thinks this can still be NULL
                  inlineFragmentType = _this.context.getSchema().getType(childNode.typeCondition.name.value);
                }

                nodeComplexity = _this.nodeComplexity(childNode, inlineFragmentType);
                break;
              }
            default:
              {
                nodeComplexity = _this.nodeComplexity(childNode, typeDef);
                break;
              }
          }
          return Math.max(nodeComplexity, 0) + total;
        }, complexity);
      }
      return complexity;
    }
  }, {
    key: 'createError',
    value: function createError() {
      if (typeof this.options.createError === 'function') {
        return this.options.createError(this.options.maximumComplexity, this.complexity);
      }
      return new _graphql.GraphQLError(queryComplexityMessage(this.options.maximumComplexity, this.complexity));
    }
  }, {
    key: 'getDefaultComplexity',
    value: function getDefaultComplexity(args, childScore) {
      return 1 + childScore;
    }
  }]);
  return QueryComplexity;
}();

exports.default = QueryComplexity;